\= main.cene (part of Cene Scaffold)
\= Copyright 2016 Ross Angle. Released under the MIT License.

(defn js-client-main client
/compile-give-unwrapped-js-effects str.client client str.\;qq;yp/
    
    console.log( "Hello, client!" );
    
    return client.done( client.wrap( null ) );
)

(defn js-server-main client
/compile-give-unwrapped-js-effects str.client client str.\;qq;yp/
    
    /*
    var require = process.mainModule.require;
    var __filename = process.mainModule.filename;
    
    var express = process.mainModule.require( "express" );
    var $path = process.mainModule.require( "path" );
    
    var __dirname = $path.dirname( __filename );
    */
    
    var require = client.getTopLevelVar( "require" );
    var __dirname = client.getTopLevelVar( "__dirname" );
    var express = require( "express" );
    var $path = require( "path" );
    
    var app = express();
    app.use( express.static( $path.resolve( __dirname, "static" ) ) );
    app.listen( 8080, function () {
        console.log( "Hello, port 8080!" );
    } );
    
    return client.done( client.wrap( null ) );
)

(def-macro go unique-ns definition-ns my-stx-details args then
  (basic-nil-macro unique-ns definition-ns my-stx-details then
  /fn unique-ns s mac
  /c istr.\;qq[build] /fn place
  /c istr.\;qq[Hello \;uq;ls`place`.\n] /fn hello-place
  /get-mode/fn mode
  /join-effects
    (output-path-blob-utf-8
      (output-path-get cli-output-directory.mode
        str.\;qq[hello-build.txt])
      hello-place)
  /join-effects
    (copy-paths mode
      (input-path-get cli-input-directory.mode str.raw)
      cli-output-directory.mode)
  /join-effects
    (make-quine mode definition-ns
      (output-path-get
        (output-path-get cli-output-directory.mode str.\;qq[static])
        str.\;qq[client.js])
      str.js-client-main
    /list)
  /join-effects
    (make-quine mode definition-ns
      (output-path-get cli-output-directory.mode str.\;qq[server.js])
      str.js-server-main
    /list str.require str.__dirname)
  /no-effects/nil))

(go)
