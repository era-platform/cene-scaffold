\= build.cene (part of Cene Scaffold)
\= Copyright 2016 Ross Angle. Released under the MIT License.

\= NOTE: This file depends on the following macros:
\=
\= def-macro let fn stx cons c foreign macro-name foldl
\= cli-input-directory cast err input-path-get foldr read-all-force
\= input-path-blob-utf-8 folding no-effects nil ns-get-string str
\= compile-expression bind-effects

(def-macro import
  mode unique-ns definition-ns my-stx-details args then
  
  (let s (fn it /stx my-stx-details it)
  /let mac
    (fn str rest
      (cons (c s /foreign/macro-name mode definition-ns str) rest))
  /let path
    (foldl cli-input-directory.mode args /fn dirname basename
      (cast basename stx - basename
        err.\;qq[Called import with non-syntax]
      /cast basename istring-nil basename
        err.\;qq[
          Called import with something other than a string literal]
      /input-path-get dirname basename))
  /cast
    (foldr (read-all-force/input-path-blob-utf-8 mode path)
      (folding unique-ns /fn mode /no-effects/nil)
    /fn expr state
      (cast state folding unique-ns launch-rest
        err.\;qq[Internal error]
      /folding (ns-get-string str.rest unique-ns)
      /fn mode
      /bind-effects (c launch-rest mode) /fn -
      /let first-ns (ns-get-string str.first unique-ns)
      /compile-expression mode
        (ns-get-string str.unique first-ns)
        definition-ns
        expr
        (ns-get-string str.outbox first-ns)))
    folding unique-ns launch-rest
    err.\;qq[Internal error]
  /bind-effects (c launch-rest mode) /fn -
  /let outbox (ns-get-string str.outbox unique-ns)
  /bind-effects (later/fn mode /c then /procure-defined mode outbox)
  /fn -
  /compile-expression mode
    (ns-get-string str.unique unique-ns)
    definition-ns
    (c s /c mac str.nil /nil)
    outbox))

(import \;qq[util.cene])
(import \;qq[main.cene])
